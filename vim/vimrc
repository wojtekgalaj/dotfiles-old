" --------------------------------------------------------------------------------------------------
" -----------------------------  Vundle Setup  -----------------------------------------------------
" --------------------------------------------------------------------------------------------------
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
" tpope's set of defaults for vim
Plugin 'tpope/vim-sensible'
" awesome git wrapper
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-git'
" wrap text objects with whatever you want
Plugin 'tpope/vim-surround'
" search and replace for similar words
Plugin 'tpope/vim-abolish'
" pairs of mappings for stuff like :cnext :cprev
Plugin 'tpope/vim-unimpaired'
" dependency, don't remember whose :(
Plugin 'tomtom/tlib_vim'
" eslint visualiser
Plugin 'w0rp/ale'
Plugin 'scrooloose/nerdtree'
Plugin 'szw/vim-ctrlspace'
Plugin 'mileszs/ack.vim'
" fix indentation when pasting stuff in
Plugin 'sickill/vim-pasta'
Plugin 'pangloss/vim-javascript'
Plugin 'mattn/emmet-vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'FelikZ/ctrlp-py-matcher'
Plugin 'Raimondi/delimitMate'
Plugin 'flazz/vim-colorschemes'
Plugin 'skwp/greplace.vim'
Plugin 'jelera/vim-javascript-syntax'
Plugin 'othree/javascript-libraries-syntax.vim'
" Plugin 'burnettk/vim-angular'
Plugin '1995eaton/vim-better-javascript-completion'
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'vim-addon-mw-utils'
Plugin 'garbas/vim-snipmate'
Plugin 'wojtekgalaj/vim-snippets'
Plugin 'MaxMEllon/vim-jsx-pretty'
" Plugin 'wavded/vim-stylus'
" Plugin 'kchmck/vim-coffee-script'
Plugin 'mtth/scratch.vim'
Plugin 'easymotion/vim-easymotion'
Plugin 'tomtom/tcomment_vim'
Plugin 'itchyny/lightline.vim'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'mitermayer/vim-prettier'
" Plugin 'Valloric/MatchTagAlways'
Plugin 'szw/vim-maximizer'
Plugin 'gcmt/taboo.vim'
" Toggle code between one line and multiline
Plugin 'AndrewRadev/splitjoin.vim'
" Align code blocks
Plugin 'godlygeek/tabular'
" Plugin 'leafgarland/typescript-vim'
Plugin 'ElmCast/elm-vim'
Plugin 'JamshedVesuna/vim-markdown-preview'
Plugin 'plasticboy/vim-markdown'
Plugin 'justinj/vim-pico8-syntax'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" --------------------------------------------------------------------------------------------------
" ---------------------------    END Vundle Setup  -------------------------------------------------
" --------------------------------------------------------------------------------------------------


" --------------------------------------------------------------------------------------------------
" -----------------------------------    SNIPPETS  -------------------------------------------------
" --------------------------------------------------------------------------------------------------
" I saw this way of solving snippets somewhere and wanted to try. In the end I
" went back to a snippet manager but this is interesting
noremap ,component :-1read $HOME/bin/dotfiles/vim/snippets/component.js<CR>
noremap ,ctrl :-1read $HOME/bin/dotfiles/vim/snippets/controller.js<CR>
noremap ,cl :-1read $HOME/bin/dotfiles/vim/snippets/console-log.js<CR>f)i
" --------------------------------------------------------------------------------------------------
" --------------------------------  END  SNIPPETS  -------------------------------------------------
" --------------------------------------------------------------------------------------------------

" Backup and swap file policies
set backupcopy=yes
set directory=~/.vim_swp//

" Mouse and arrow key policies
set mouse=a

" Indentation
set expandtab
set tabstop=2
set shiftwidth=2

" Search related
set ignorecase
set smartcase

" Allow deep file finding
set path+=**

" Other editor settings
set nowrap
set cursorline
highlight Comment cterm=italic

" Use system clipboard
set clipboard=unnamed

" Colors
set t_Co=256
syntax on
colorscheme monokai

" Secret stuff for working on my essey on how everyone sucks
nn <F9> mzggg?G`z



" Show different cursor depending on mode
" if using iTerm2
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" CTRL Space
set hidden

" Key Bindings

let mapleader = "\<space>"

" Easily switch between windows
nnoremap <silent> <c-k> :wincmd k<cr>
nnoremap <silent> <c-j> :wincmd j<cr>
nnoremap <silent> <c-h> :wincmd h<cr>
nnoremap <silent> <c-l> :wincmd l<cr>

nnoremap <Leader>w :wa<cr>
nnoremap <Leader>a :Ack!<Space>
nnoremap <Leader>h :noh<cr>
nnoremap <Leader>m :Scratch<cr>
nnoremap <Leader>j :%!python -m json.tool<cr>
nnoremap <Leader>n :set relativenumber!<cr>
nnoremap <silent><F3> :MaximizerToggle<CR>
vnoremap <silent><F3> :MaximizerToggle<CR>gv
inoremap <silent><F3> <C-o>:MaximizerToggle<CR>

" Split windows
nnoremap <Leader>s :sp<cr><C-w><C-w>
nnoremap <Leader>v :vsp<cr><C-w><C-w>

" Get some tabs going
nnoremap tn :tabnew<cr>
nnoremap tt :tabnew %<cr>
nnoremap tc :tabclose<cr>
nnoremap tk :tabnext<cr>
nnoremap tj :tabprev<cr>
nnoremap th :tabfirst<cr>
nnoremap tl :tablast<cr>
" Center screen on next and previous search result
nnoremap n nzz
nnoremap N Nzz


" Hide the tabline and use the list view in ctrl-space
" To view the list of tabs press l
nnoremap <c-space> :CtrlSpace<cr>
set showtabline=0

" Folding settings
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

" NERDTree
let NERDTreeShowHidden=1
let g:NERDTreeWinSize=60
:let g:NERDTreeIgnore=['\~$', 'dist', '.DS_Store']
set encoding=utf-8
nnoremap <leader><Tab> :NERDTreeToggle<cr>
nnoremap <leader><leader><Tab> :NERDTreeFind<cr>

" CtrlP
" 'c' The directory of current file
" 'r' nearest ancestor with .git
let g:ctrlp_working_path_mode='r'
let g:ctrlp_custom_ignore = {'dir': '\v[\/](\.git|\.hg|\.svn|bower_components|node_modules|coverage|build)$', 'file': '\v\.(exe|so|dll)$'}
" let g:ctrlp_match_func = {'match': 'pymatcher#PyMatch'}

" CTRL Space
let g:ctrlspace_use_mouse_and_arrows_in_term = 1

" Prevent cursor from moving after exiting insert mode
let CursorColumnI = 0 "the cursor column position in INSERT
autocmd InsertEnter * let CursorColumnI = col('.')
autocmd CursorMovedI * let CursorColumnI = col('.')
autocmd InsertLeave * if col('.') != CursorColumnI | call cursor(0, col('.')+1) | endif"

" Statusline setup
set noshowmode


" " Ale setup
let g:ale_set_highlights = 0
let g:ale_fixers = {'javascript': ['prettier']}
let g:ale_fix_on_save = 1
" let g:ale_set_loclist = 1
" let g:ale_set_quickfix = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_javascript_prettier_use_local_config = 1
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'html': [],
\}

nnoremap <Leader>t :ALEToggle<cr>

" LightLine setup
let g:lightline = {
  \ 'colorscheme': 'wombat',
  \ 'component': {
  \   'readonly': '%{&readonly?"тнд":""}',
  \ },
  \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
  \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
  \ }


" Emmet
let g:user_emmet_leader_key=','

if !exists("g:ycm_semantic_triggers")
  let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers['typescript'] = ['.']

" Clean trailing whitespace
au BufWritePre * :%s/\s\+$//e

" Ack settings
let g:ackprg = 'ag --nogroup --nocolor --column'
